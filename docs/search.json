[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GitHub Tutorial",
    "section": "",
    "text": "This will serve as a short tutorial that covers the benefits of version control and how you can quickly setup and use a service such as GitHub to maintain, share, and collaborate on various code-based projects.\n\n\nScripts of coding language (e.g., R, Python) are often living documents that grow and change alongside the skills and needs of the developer, As a result, code if often re-written to test a new idea, produce a new analysis, or modify an existing figure.\nHowever, we may want to keep that original code, especially if we prescribe to the ’if it ain’t broke, don’t fix it’ mentality. This often leads to scripts full of extraneous or commented code, multiple versions of a script (e.g., v1, v1.2, v2.6.7), and an all around disorganized product that may be difficult to reproduce. Reproducibility, and more recently transparency of our code, are cornerstones of research and publishing.\nA service such as Git can help us achieve both of these things. Nearly all coding scripts are simple ASCII text files. They do not contain formatting complexities such as margins, font type, size, figures, etc. Therefore, services like Git are able to recognize nearly any in a script, allowing the developer to catalog and store those changes without the necessity of maintaining out-dated code or file revisions. In essence, we can create a repository of changes that allow us to visualize and accept/reject those changes, and possibly restore previous versions of our code if necessary.\nThis can be incredibly powerful for a number of reasons:\n\nIf we break the code for an analysis or a figure, we can simply go back to a previous working version of our code - thus, version control\nCloud based services such as Box, OneDrive, or GoogleDrive allow you to sync changes across devices, but the simplicity of ASCII text files do not typically allow us to track where changes were made or how (e.g., MS Word’s Track Changes). Git can identify those changes, and some GUI’s will indicate where those changes exist in the script.\n\n\n\n\nNote the replacement of “Testing” with “GitHub Tutorial”\n\n\n\nR and Python are among the most widely used open-source coding languages. Large-scale collaborative studies often bring people together, working together on code-based analyses, visualizations, etc. Git repositories allow for a centralized location for all of this to happen among collaborators while simultaneously tracking changes made by any one individual.\nWe can create branches of our code to test out new approaches, analyses, etc., and then seamlessly fold those changes back into our mainstream code with little-to-no downtime. This is particularly relevant for websites or services that continually provide product(s), but where developers may want to make modifications to improve existing or add new features.\n\n\n\n\nGitHub is one of many UIs that improve how we interact with Git. Git, similar to R is typically operated through text commands in the console (e.g., Command Prompt, PowerShell). GitHub is simply a more intuitive, graphical interface for the Git service(s). To make things even more complicated, there are a number of third-party programs that interact with GitHub.\nHowever, the key point is that much like RStudio needs R (or Python) to operate, GitHub requires Git to do what we want."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This tutorial was developed for the University of South Florida College of Marine Science’s Fish Ecology Lab"
  },
  {
    "objectID": "index.html#why-is-version-control-important-and-why-should-i-use-it.",
    "href": "index.html#why-is-version-control-important-and-why-should-i-use-it.",
    "title": "GitHub Tutorial",
    "section": "Why is version control important and why should I use it.",
    "text": "Why is version control important and why should I use it.\nScripts of coding language (e.g., R, Python) are often living documents that grow and change alongside the skills and needs of the developer, As a result, code if often re-written to test a new idea, produce a new analysis, or modify an existing figure. However, if we prescribe to the ‘if it ain’t broke, don’t fix it’ mentality, we usually want to keep that original code. This may lead to coding scripts full of commented out code, multiple versions of a script (e.g., v1, v1.2, vFinal), and an all around disorganized product that may be difficult to reproduce. Reproducibility, and more recently transparency, are cornerstones of research and publishing.\nA service such as Git, or interfaces such as GitHub, can help us achieve both. Specifically, nearly all coding scripts are simple ASCII text files. They do not contain formatting complexities such as margins, font type, font size, figures, etc. Therefore, a service like Git is able to recognize when there are meaningful changes in a script, which may then be cataloged over time.\n\n\n\nNote the replacement of “Testing” with “GitHub Tutorial”"
  },
  {
    "objectID": "GettingStarted.html",
    "href": "GettingStarted.html",
    "title": "Getting Started",
    "section": "",
    "text": "It is easiest to use the default installation directory; however, if you want to the change the installation location, make note of the new directory because you will need to direction Rstudio, GitHub Desktop or other programs to that location. More on this below…\n\n\n\nGit/SVN is found in the Global Options under “Tools”\n\n\n\n\n\n\n\n\nAlthough Git comes with a GUI (specifically, GitGUI), there are countless other GUI’s available, that each boast various utilities and add-ins may cater to different needs.\nWe will cover GitHub Desktop in this tutorial, since it is relatively simple and is directly offered by GitHub\n\n\n\n\n\n\n\n\nBe sure that ‘create a git repository’ is checked\n\n\n\n\n\nOnce version control has been enabled in the Global Options, you can it on for any pre-existing R Project in the Project Options.\n\n\n\n\n\n\n\n\n\nIf you select a folder that does not contain a version-controlled .Rproj file, GitHub desktop will display an error\n\n\n\n\n\nSelect the files you want to include \nAnnotate and provide descriptive notes, then commit \nPublish! \nYou can change the name of your repository, provide a description, indicate whether this should be made publicly available on GitHub for other users to view, and indicate whether this repo is personal, or belongs to a GitHub organization.\n\n\n\n\n\n\n\nOnce you finish making changes, you will need to ‘commit’ and ‘push’ those changes to GitHub, where they then become a history marker in the catalog."
  },
  {
    "objectID": "GettingStarted.html#rinse-repeat-win",
    "href": "GettingStarted.html#rinse-repeat-win",
    "title": "Getting Started",
    "section": "Rinse, Repeat, Win!!!",
    "text": "Rinse, Repeat, Win!!!"
  }
]